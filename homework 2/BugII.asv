function BugII(serPort)
    angle = AngleSensorRoomba(serPort);
    DistanceSensorRoomba(serPort);
    currentX = 0
    currentY = 0
    [BumpRight,BumpLeft,a,b,c,BumpFront] = BumpsWheelDropsSensorsRoomba(serPort);
    [Wall]= WallSensorReadRoomba(serPort);

    while 1
        %turnAngle(serPort, 0.2, -angle);
        while ((~IsEquivalent(currentX, 0)|| ~IsEquivalent(currentY, 4)) && (BumpRight == 0 && BumpRight == 0 && BumpFront == 0))
            disp(['bumpfront is ' num2str(BumpFront)])
            SetFwdVelRadiusRoomba(serPort, 0.2, inf);
            pause(0.1);
            magnitude = DistanceSensorRoomba(serPort);
            angle = angle + AngleSensorRoomba(serPort);
            currentX = currentX + magnitude * cos(angle);
            currentY = currentY + magnitude * sin(angle);
            disp([num2str(angle) num2str(magnitude) num2str(currentX) num2str(currentY)])
            [BumpRight,BumpLeft,a,b,c,BumpFront] = BumpsWheelDropsSensorsRoomba(serPort);
            lastY = currentY
        end
        disp(['CHECKPOINT 1'])
        
        if (IsEquivalent(currentY, 4) && IsEquivalent(currentX, 0))
            disp(['Done'])
            return
        end

        %while ((x ~= 0 || y ~= 4) && (x ~= 0 || y ~= last_y) && (x ~= 0 || y <= last_y))
        
        %changed while to if
        if ((~IsEquivalent(currentX, 0) || ~IsEquivalent(currentY,4)) && (~IsEquivalent(currentX, 0) || ~IsEquivalent(currentY, lastY)) ...
            && (~IsEquivalent(currentX, 0) || lastY - currentY > 0.1))

            [currentX,currentY, angle] = followTheBound(serPort, currentX, currentY, angle)
        end


        if (IsEquivalent(currentY, 4) && IsEquivalent(currentX, 0))
            disp(['Done'])
            return
        end

        if (~IsEquivalent(currentX,0) && ~IsEquivalent(currentY, lastY))
            disp(['the robot is trapped'])
            return
        end
    end
end


function [currentX, currentY, angle] = followTheBound(serPort, startX, startY, startAngle)
   max_vel = 0.4;
   
   [BumpRight,BumpLeft,a,b,c,BumpFront] = BumpsWheelDropsSensorsRoomba(serPort);
   [Wall]= WallSensorReadRoomba(serPort);

   currentX = startX
   currentY = startY
   angle = startAngle
    % To record that whether the robot has returned to the start point
    
    % The main while loop
    startMoving = 0
    while (1)
       
       % The I part: Go straight forward. 
       % Before this loop, we have to record the original isStartPoint. 
       % This is to deal with the problem
       % that sometimes the robot stops at the start point at the
       % beginning, without going anywhere. We Assume that the robot will
       % return to the start point only in the middle of I or III part.
       % beforeLoopIsStartPoint = IsStartPoint(currentX, currentY, initialX, initialY);
       while ((BumpRight==0 && BumpLeft==0 && BumpFront == 0 && Wall == 1))
            SetFwdVelRadiusRoomba(serPort, max_vel, inf);
            pause(0.1);
            [BumpRight,BumpLeft,a,b,c,BumpFront] = BumpsWheelDropsSensorsRoomba(serPort);
            [Wall]= WallSensorReadRoomba(serPort);   
            magnitude = DistanceSensorRoomba(serPort);
            currentX = currentX + magnitude * cos(angle);
            currentY = currentY + magnitude * sin(angle);
            if (IsEquivalent(currentX, 0) && startMoving == 1)
                break
            end
       end
       if IsEquivalent(currentX, 0) && startMoving == 1
          disp(['jump out of funciton followTheBoud'])
          return
       end

       startMoving = 1

        % The II Part: Turn left until there is no bump detected.
        % Note that in this part, the robot didn't go any further, so
        % there is no way that the robot returns to the start point after
        % this Part.
        while(BumpRight==1 || BumpLeft==1 || BumpFront == 1)
            turnAngle(serPort, 0.2, 5);
            disp(['turning left']);
            [BumpRight,BumpLeft,a,b,c,BumpFront] = BumpsWheelDropsSensorsRoomba(serPort);
        end
        
        angle = angle + AngleSensorRoomba(serPort);
        
        % The III Part: To find the wall.
        % Since the robot has to walk along the wall, so when the wall
        % sensor is 0, it has to find the wall. 
        % beforeLoopIsStartPoint = IsStartPoint(currentX, currentY, initialX, initialY);
        while (Wall == 0 && (BumpRight==0 || BumpLeft==0 || BumpFront==0 ))
            disp(['no wall detected']);
            % Turn little left and then go little further.
            turnAngle(serPort, 0.2, -5);
            travelDist(serPort, 0.05, 0.01);
            [BumpRight,BumpLeft,a,b,c,BumpFront] = BumpsWheelDropsSensorsRoomba(serPort);
            [Wall]= WallSensorReadRoomba(serPort);
            angle = angle + AngleSensorRoomba(serPort);
            magnitude = DistanceSensorRoomba(serPort);
            currentX = currentX + magnitude * cos(angle);
            currentY = currentY + magnitude * sin(angle);
        end
       if IsEquivalent(currentX, 0)
       		return
       end
    end
end

function isEquivalent = IsEquivalent(x,y)
    isEquivalent =  abs(x-y) < 0.1
end